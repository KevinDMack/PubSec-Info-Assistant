# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.
name: info-assistant-deploy

on: 
    workflow_dispatch:
    push:
        branches:
         - main # Change to match your branch

jobs:
  deploy-info-assistant:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install jq
        shell: bash 
        run: sudo apt-get install -y jq

      - name: Install Docker
        shell: bash
        run: |
          if docker --version >/dev/null 2>&1; then
              echo "Docker is installed, skipping the step."
          else
              echo "Installing docker - version 24.0.9-1..."
              echo ""

              sudo apt-get update
              sudo apt-get install ca-certificates curl
              sudo install -m 0755 -d /etc/apt/keyrings
              sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
              sudo chmod a+r /etc/apt/keyrings/docker.asc

              # Add the repository to Apt sources:
              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
                $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
                sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update

              APT_DOCKER_INSTALL_VERSION=$(apt-cache madison docker-ce | awk '{ print $3 }' | grep 24.0.9-1)
              sudo apt-get install docker-ce=$APT_DOCKER_INSTALL_VERSION docker-ce-cli=$APT_DOCKER_INSTALL_VERSION containerd.io docker-buildx-plugin docker-compose-plugin -y

              echo "Setup docker group"
              sudo usermod -aG docker $USER
              echo "running newgrp docker..."
              newgrp docker
              sudo chmod 666 /var/run/docker.sock
          fi

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: 'AzureUSGovernment'

      - name: "Validate CLI"
        shell: bash 
        run: az account show

      - name: Write Local.env
        shell: bash
        run: |
          echo "Writing local env file..."
          if [ ! -f ./scripts/environments/local.env ]; then
            echo "${{ secrets.LOCAL_ENV }}" > ./scripts/environments/local.env
          fi
          echo ""
          echo "Writing tf-backend env file..."
          if [ ! -f ./scripts/environments/tf-backend.env ]; then
            echo "${{ secrets.TF_BACKEND }}" > ./scripts/environments/tf-backend.env
          fi
          echo ""
          echo "Finished creating env files."

      - name: Build docker image
        shell: bash
        run: |
          docker build '$(Build.SourcesDirectory)/.devcontainer' \
              -t 'info-asst-devcontainer:$(Build.BuildId)' \
              -t 'info-asst-devcontainer:latest' \
              -f '$(Build.SourcesDirectory)/.devcontainer/Dockerfile' \
              --cache-from $(CONTAINER_REGISTRY_ADDRESS)/info-asst-devcontainer:latest \
              --build-arg BUILDKIT_INLINE_CACHE=1 \
              --build-arg USER_UID=$(id -u) \
              --build-arg USER_GID=$(id -g)

      - name: Login inside devcontainer
        shell: bash
        run: |
          docker run -d --name devcontainer info-asst-devcontainer:latest
          docker exec -it devcontainer /bin/bash -c "az cloud set --name AzureUSGovernment"
          docker exec -it devcontainer /bin/bash -c "az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_CLIENT_TENANT_ID }}"
          docker exec -it devcontainer /bin/bash -c "az account show"

      - name: Replace Tokens
        shell: bash
        run: |
          sed -i "s|__SUFFIX__|${{ secrets.SUFFIX }}|g" ./inf_output.json
          sed -i "s|__AOAI_SERVICE_NAME__|${{ secrets.AOAI_SERVICE_NAME }}|g" ./inf_output.json
          sed -i "s|__AOAI_RESOURCE_GROUP__|${{ secrets.AOAI_RESOURCE_GROUP }}|g" ./inf_output.json
          sed -i "s|__CONTAINER_REGISTRY_PASSWORD__|${{ secrets.CONTAINER_REGISTRY_PASSWORD }}|g" ./inf_output.json
          sed -i "s|__INFO_ASSIST_RESOURCE_GROUP__|${{ secrets.INFO_ASSIST_RESOURCE_GROUP }}|g" ./inf_output.json

      - name: Make-Run Take Ownership
        shell: bash
        run: |
          docker exec -it devcontainer /bin/bash -c "make take-dir-ownership"

      - name: Make-Build
        shell: bash
        run: |
          docker exec -it devcontainer /bin/bash -c "make build"

      # # This is for the deployment of the infrastructure, should be used with caution given that changes for domain names and urls to the App Service that are not in the terraform.  
      # # - name: Make-infra
      # #   shell: bash
      # #   run: |
      # #     devcontainer exec --workspace-folder . source ./scripts/environments/tf-backend.env
      # #     devcontainer exec --workspace-folder . make infrastructure-remote-backend

      - name: Make-Extract environment
        shell: bash
        run: |
          echo "Getting directory contents..."
          docker exec -it devcontainer /bin/bash -c "ls"
          echo "" 
          echo "Running make extract-env..."
          docker exec -it devcontainer /bin/bash -c "make extract-env"

      - name: Make-Deploy Search indexes
        shell: bash
        run: |
          docker exec -it devcontainer /bin/bash -c "make deploy-search-indexes"

      - name: Make-Deploy Azure Functions
        shell: bash
        run: |
          docker exec -it devcontainer /bin/bash -c "make deploy-functions"

      - name: Make-Deploy Web App'
        shell: bash
        run: |
          docker exec -it devcontainer /bin/bash -c "make deploy-webapp"

      - name: Make-Deploy Enrichments
        shell: bash
        run: |
          docker exec -it devcontainer /bin/bash -c "make deploy-enrichments"
