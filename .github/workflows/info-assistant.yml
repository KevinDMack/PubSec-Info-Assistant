name: info-assistant-deploy

on: 
    workflow_dispatch:
    push:
        branches:
         - km/workflow

jobs:
  deploy-info-assistant:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Docker
        shell: bash
        run: |
          if docker --version >/dev/null 2>&1; then
              echo "Docker is installed, skipping the step."
          else
              echo "Installing docker - version 24.0.9-1..."
              echo ""

              sudo apt-get update
              sudo apt-get install ca-certificates curl
              sudo install -m 0755 -d /etc/apt/keyrings
              sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
              sudo chmod a+r /etc/apt/keyrings/docker.asc

              # Add the repository to Apt sources:
              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
                $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
                sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update

              APT_DOCKER_INSTALL_VERSION=$(apt-cache madison docker-ce | awk '{ print $3 }' | grep 24.0.9-1)
              sudo apt-get install docker-ce=$APT_DOCKER_INSTALL_VERSION docker-ce-cli=$APT_DOCKER_INSTALL_VERSION containerd.io docker-buildx-plugin docker-compose-plugin -y

              echo "Setup docker group"
              sudo usermod -aG docker $USER
              echo "running newgrp docker..."
              newgrp docker
              sudo chmod 666 /var/run/docker.sock
          fi

      - name: Install Devcontainer cli
        shell: bash
        run: |
            echo "Detecting architecture..."
            TARGET_ARCHITECTURE="amd64"
            ARCH=$(uname -m)

            if [[ "$ARCH" == "x86_64" ]]; then
              echo "amd64 architecture detected"
              echo "Installing npm.."
              echo "Runnning 'npm install -g n'..."
              sudo npm install -g n
              echo "Runnning 'npm install -g @devcontainers/cli'..."
              sudo npm install -g @devcontainers/cli
              echo "Checking the version..."
              devcontainer --version
              printenv
            elif [[ "$ARCH" == "aarch64" ]]; then
                echo "arm64 architecture detected"
                if ! command -v npm &> /dev/null
                then
                  echo "npm is not installed, installing..."
                    sudo apt-get update
                    echo "installing npm..."
                    sudo apt-get install -y npm
                    echo ""
                    echo "Checking the version..."
                    npm --version
                    echo "install n package globally..."
                    sudo npm install -g n
                    echo ""
                    echo "Running 'npm cache clean -f'..."
                    sudo npm cache clean -f
                    echo ""
                    echo "Upgrade nodejs"
                    sudo n 18.20.3
                    echo "Run hash command"
                    hash -r
                    echo ""
                    echo "Setup the directory...."
                    sudo mkdir -p /usr/local/lib/node_modules
                    sudo chown -R $USER:$USER /usr/local/lib/node_modules
                    echo ""
                    echo "Setting up permissions"
                    mkdir ~/.npm-global
                    npm config set prefix '~/.npm-global'
                    echo 'export PATH=~/.npm-global/bin:$PATH' >> ~/.bashrc
                    source ~/.bashrc
                fi

                echo ""
                echo "Get node version:"
                node --version
                echo ""
                echo "Runnning 'npm install -g n'..."
                sudo npm install -g n
                echo "Runnning 'npm install -g @devcontainers/cli'..."
                sudo npm install -g @devcontainers/cli
                echo "Checking the version..."
                devcontainer --version
                printenv
            else
                echo "Unknown architecture: $ARCH"
                exit 1
            fi

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: 'AzureUSGovernment'

      - name: "Validate CLI"
        shell: bash 
        run: az account show

      - name: Write Local.env
        shell: bash
        run: |
          echo "Writing local env file..."
          if [ ! -f ./scripts/environments/local.env ]; then
            echo "${{ secrets.LOCAL_ENV }}" > ./scripts/environments/local.env
          fi
          echo ""
          echo "Writing tf-backend env file..."
          if [ ! -f ./scripts/environments/tf-backend.env ]; then
            echo "${{ secrets.TF_BACKEND }}" > ./scripts/environments/tf-backend.env
          fi
          echo ""
          echo "Writing inf-output.json file..."
          if [ ! -f ./inf-output.json ]; then
            echo "${{ secrets.INF_OUTPUT_JSON }}" > ./inf-output.json
          fi
          echo ""
          echo "Finished creating env files."

      - name: Standup Devcontainer
        shell: bash
        run: |
          devcontainer up --workspace-folder .

      - name: Login inside devcontainer
        shell: bash
        run: |
          devcontainer exec --workspace-folder . az cloud set --name AzureUSGovernment 
          devcontainer exec --workspace-folder . az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_CLIENT_TENANT_ID }}
          
      - name: Make-Run Take Ownership
        shell: bash
        run: |
          devcontainer exec --workspace-folder . make take-dir-ownership

      - name: Make-Build
        shell: bash
        run: |
          devcontainer exec --workspace-folder . make build

      # # This is for the deployment of the infrastructure, should be used with caution given that changes for domain names and urls to the App Service that are not in the terraform.  
      # # - name: Make-infra
      # #   shell: bash
      # #   run: |
      # #     devcontainer exec --workspace-folder . source ./scripts/environments/tf-backend.env
      # #     devcontainer exec --workspace-folder . make infrastructure-remote-backend

      - name: Make-Extract environment
        shell: bash
        run: |
          echo "Getting directory contents..."
          devcontainer exec --workspace-folder . ls
          echo "" 
          echo "Running make extract-env..."
          devcontainer exec --workspace-folder . make extract-env

      - name: Make-Deploy Search indexes
        shell: bash
        run: |
          devcontainer exec --workspace-folder . make deploy-search-indexes

      - name: Make-Deploy Azure Functions
        shell: bash
        run: |
          devcontainer exec --workspace-folder . make deploy-functions

      - name: Make-Deploy Web App'
        shell: bash
        run: |
          devcontainer exec --workspace-folder . make deploy-web-app

      - name: Make-Deploy Enrichments
        shell: bash
        run: |
          devcontainer exec --workspace-folder . make deploy-enrichments